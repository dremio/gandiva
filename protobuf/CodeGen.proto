/*
 * Copyright (C) 2017-2018 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

// Structures to describe expressions for code generation.
package gandiva;

option java_package = "com.dremio.exec.proto";
option java_outer_classname = "CodeGen";
option optimize_for = SPEED;
option java_generate_equals_and_hash = true;

import "Types.proto";

// Contains index refs into the "list of addresses"
message VectorExpr {
    optional common.MajorType majorType = 1;
    optional string name = 2;
    optional int32 validityIdx = 3;
    optional int32 dataIdx = 4;
    optional int32 offsetsIdx = 5;
}

message FunctionExpr {
    optional string name = 1;
    repeated common.MajorType argTypes = 2;
    optional common.MajorType returnType = 3;
    repeated Expr children = 4;
}

message BooleanExpr {
    enum Type {
        AND = 1;
        OR = 2;
    }

    optional Type type = 1;
    repeated Expr children = 2;
}

message IfExpr {
    optional Expr condition = 1;
    optional Expr thenE = 2;
    optional Expr elseE = 3;
    optional common.MajorType outputType = 4;
}

message Literal {
    enum Type {
        INT = 1;
        BIGINT = 2;
        FLOAT = 3;
        DOUBLE = 4;
        STRING = 5;
    }

    optional Type type = 1;
    optional bool isNull = 2;

    // One of the following.
    optional int32 intLiteral = 6;
    optional int64 bigIntLiteral = 7;
    optional float floatLiteral = 8;
    optional double doubleLiteral = 9;
    optional string stringLiteral = 10;
}

message Expr {
    enum Type {
        VECTOR = 0;
        FUNCTION = 1;
        BOOLEAN = 2;
        IF = 3;
        LITERAL = 4;
    }

    optional Type type = 1;

    // One of the following.
    optional VectorExpr vector = 2;
    optional FunctionExpr function = 3;
    optional BooleanExpr booleanE = 4;
    optional IfExpr ifE = 5;
    optional Literal literal = 6;
}

message ColumnExpr {
    optional VectorExpr output = 1;
    optional Expr expr = 2;
}

message Projection {
    repeated ColumnExpr exprs = 1;
}

// Useful for repro/testing
message VectorDump {
    optional int32 nrecords = 1;
    repeated bytes binaryData = 3;
}
